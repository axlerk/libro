import os
import codecs
from tomlkit import comment
from tomlkit import document
from tomlkit import table
from tomlkit import dumps
from tomlkit import loads

import libro.config as config
import libro.defaultcss as defaultcss


def generate_default():
    css_file = os.path.normpath(os.path.join(config.config_dir, 'default.css'))
    doc = document()
    doc.add(comment('fb2c configuration file'))
    doc.add(comment('Generated by Libro'))

    logger = table()

    logger_console = table()
    logger_console.add('level', 'none')

    logger_file = table()
    logger_file.add('level', 'debug')
    logger_file.add('destination', config.converter_log_file)
    logger_file.add('mode', 'overwrite')

    logger.add('console', logger_console)
    logger.add('file', logger_file)

    docum = table()

    docum.add('style', css_file)
    docum.add('remove_png_transparency', True)
    docum.add('title_format', '#title')
    docum.add('series_number_positions', 2)
    docum.add('author_format', '{#f }#l')
    docum.add('insert_soft_hyphen', False)
    docum.add('characters_per_page', 1200)

    docum_annotation = table()
    docum_annotation.add('create', True)
    docum_annotation.add('title', 'Аннотация')
    docum.add('annotation', docum_annotation)

    docum_notes = table()
    docum_notes.add('mode', 'float')
    docum_notes.add('body_names', ['notes', 'Примечания', 'comments', 'Комментарии'])
    docum.add('notes', docum_notes)

    docum_toc = table()
    docum_toc.add('type', 'kindle')
    docum_toc.add('page_placement', 'after')
    docum_toc.add('page_title', 'Содержание')
    docum.add('toc', docum_toc)

    docum_transform = table()
    docum_transform_speech = table()
    docum_transform_speech.add('from', '‐‑−–—―…')
    docum_transform_speech.add('to', '— ')
    docum_transform_dashes = table()
    docum_transform_dashes.add('from', '‐‑−–—―')
    docum_transform_dashes.add('to', '—')
    docum_transform.add('speech', docum_transform_speech)
    docum_transform.add('dashes', docum_transform_dashes)
    docum.add('transform', docum_transform)

    docum_vignettes = table()
    docum_vignettes.add('create', False)
    docum.add('vignettes', docum_vignettes)

    docum_kindlegen = table()
    docum_kindlegen.add('generate_apnx', 'none')
    docum.add('kindlegen', docum_kindlegen)

    stk = table()
    stk.add('delete_sent_book', True)
    stk.add('smtp_server', '')
    stk.add('smtp_port', 0)
    stk.add('smtp_user', '')
    stk.add('smtp_password', '')
    stk.add('from_mail', '')
    stk.add('to_mail', '')

    doc.add('logger', logger)
    doc.add('document', docum)
    doc.add('sendtokindle', stk)

    with codecs.open(config.default_converter_config, mode='w', encoding='utf-8') as f:
        f.write(dumps(doc))

    config.fb2c_css_file = css_file
    with codecs.open(css_file, mode='w', encoding='utf-8') as f:
        f.write(defaultcss.content)


def generate():
    with codecs.open(config.default_converter_config, mode='r', encoding='utf-8') as f:
        d = loads(f.read())

    d['logger']['file']['level'] = config.fb2c_log_level
    d['logger']['file']['destination'] = config.converter_log_file
    d['logger']['file']['mode'] = config.fb2c_log_mode

    d['document']['style'] = config.fb2c_css_file
    d['document']['title_format'] = config.fb2c_title_format
    d['document']['author_format'] = config.fb2c_author_format
    d['document']['insert_soft_hyphen'] = config.fb2c_insert_soft_hyphen
    d['document']['notes']['mode'] = config.fb2c_notes_mode
    d['document']['kindlegen']['generate_apnx'] = config.fb2c_apnx_mode

    d['sendtokindle']['delete_sent_book'] = True
    d['sendtokindle']['smtp_server'] = config.fb2c_stk_smtp_server
    d['sendtokindle']['smtp_port'] = config.fb2c_stk_smtp_port
    d['sendtokindle']['smtp_user'] = config.fb2c_stk_smtp_user
    d['sendtokindle']['smtp_password'] = config.fb2c_stk_smtp_password
    d['sendtokindle']['from_mail'] = config.fb2c_stk_from_email
    d['sendtokindle']['to_mail'] = config.fb2c_stk_to_email

    with codecs.open(config.default_converter_config, mode='w', encoding='utf-8') as f:
        f.write(dumps(d))
